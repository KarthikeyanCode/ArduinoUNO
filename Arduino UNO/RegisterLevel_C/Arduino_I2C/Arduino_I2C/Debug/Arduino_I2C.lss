
Arduino_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fe  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006df  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f8  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000151  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <TWI_init>:

//initializing the TWI process (I2C)
void TWI_init()
{	
	//Enabling interrupts globally 
	sei();
  90:	78 94       	sei
	
	//TWCR - two wire control register 
	//enabling the TWI bit for TWI interface
	TWCR = (1<<TWEN);
  92:	ec eb       	ldi	r30, 0xBC	; 188
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	80 83       	st	Z, r24
	
	//writing the acknowledge bit to 1
	TWCR |= (1<<TWEA);
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	
	//setting TWIE interrupt enable bit
	TWCR |= (1<<TWIE);
  a0:	80 81       	ld	r24, Z
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	80 83       	st	Z, r24
	
	//setting the SCL frequency 
	TWBR = 0x00;
  a6:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = (0<<TWPS1) | (0<<TWPS0);
  aa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ae:	08 95       	ret

000000b0 <main>:
	
}

int main(void)
{
	DDRB = (1<<DDB5);
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	84 b9       	out	0x04, r24	; 4
	data = 'C';
  b4:	83 e4       	ldi	r24, 0x43	; 67
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    TWI_init();
  ba:	0e 94 48 00 	call	0x90	; 0x90 <TWI_init>
    while (1) 
    {
		PORTB ^= (1<<PORTB5);
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	98 27       	eor	r25, r24
  c4:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	33 ed       	ldi	r19, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x1c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x26>
  d6:	00 00       	nop
		_delay_ms(1000);
		PORTB ^= (1<<PORTB5);
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	89 27       	eor	r24, r25
  dc:	85 b9       	out	0x05, r24	; 5
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	33 ed       	ldi	r19, 0xD3	; 211
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x34>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x3e>
  ee:	00 00       	nop
  f0:	e6 cf       	rjmp	.-52     	; 0xbe <main+0xe>

000000f2 <__vector_24>:
		_delay_ms(1000);
    }
}

ISR(TWI_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	//sets the start bit
	TWCR ^= (1<<TWSTA);
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	98 27       	eor	r25, r24
 112:	90 83       	st	Z, r25
 114:	af e9       	ldi	r26, 0x9F	; 159
 116:	bf e0       	ldi	r27, 0x0F	; 15
 118:	11 97       	sbiw	r26, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <__vector_24+0x26>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <__vector_24+0x2c>
 11e:	00 00       	nop
	_delay_ms(1);
	TWCR ^= (1<<TWSTA); //clearing the TWSTA bit after start condition has been transmitted
 120:	90 81       	ld	r25, Z
 122:	89 27       	eor	r24, r25
 124:	80 83       	st	Z, r24
	
	//writing data to the TWDR register 
	TWDR = data;
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
	//setting the stop bit, so that we can start the transmission again in another ISR
	TWCR |= (1<<TWSTO);
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	9f e0       	ldi	r25, 0x0F	; 15
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <__vector_24+0x46>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <__vector_24+0x4c>
 13e:	00 00       	nop
	_delay_ms(1);
	
	//clearing the TWINT flag after servicing the interrupt
	TWCR ^= (1<<TWINT);
 140:	80 81       	ld	r24, Z
 142:	80 58       	subi	r24, 0x80	; 128
 144:	80 83       	st	Z, r24
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
